

FUNCTION_BLOCK thrower	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	distance : REAL;
	angle : REAL;
END_VAR

VAR_OUTPUT				// Define output variable
	veloZero : REAL;
END_VAR

FUZZIFY distance		// Fuzzify input variable 'distance': { 'poor', 'average','high' }
	TERM poor := (0, 1) (15,0); 
	TERM average := (7, 0) (15,1) (20,1) (24,0);
	TERM high := (20, 0) 	(30, 1);
END_FUZZIFY

FUZZIFY angle			// Fuzzify input variable 'angle': { 'poor', 'perfect','toomuch' }
	TERM poor := (0, 1) (20,0) ;
	TERM perfect := (15,0) (30,1) (60,1) (75,0);
	TERM toomuch := (60,0) (89,1);
END_FUZZIFY

DEFUZZIFY veloZero			// Defzzzify output variable 'veloZero' : {'poor', 'average', 'high' }
	TERM poor := (0,0) (1,1) (12,0);
	TERM average := (10,0) (15,1) (20,1) (25,0);
	TERM high := (25,0) (70,1) (75,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	RULE 1 : IF distance IS poor AND angle IS poor THEN veloZero IS average;
	RULE 2 : IF distance IS poor AND angle IS perfect THEN veloZero IS average;
	RULE 3 : IF distance IS poor AND angle IS toomuch THEN veloZero IS poor;
	
	RULE 4 : IF distance IS average AND angle IS poor THEN veloZero IS average;
	RULE 5 : IF distance IS average AND angle IS perfect THEN veloZero IS average;
	RULE 6 : IF distance IS average AND angle IS toomuch THEN veloZero IS average;
	
	RULE 7 : IF distance IS high AND angle IS poor THEN veloZero IS high;
	RULE 8 : IF distance IS high AND angle IS perfect THEN veloZero IS average;
	RULE 9 : IF distance IS high AND angle IS toomuch THEN veloZero IS high;
	
END_RULEBLOCK

END_FUNCTION_BLOCK